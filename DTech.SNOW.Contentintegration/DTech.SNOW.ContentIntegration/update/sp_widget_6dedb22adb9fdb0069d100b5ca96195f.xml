<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($rootScope, $scope, $location, spUtil, amb, $http, spAriaUtil, $timeout, spModal) {
	var c = this;
	/*
	 * options:
	 * table (string) = the table name to query
	 * fields (string) = comma seperated list of fields that become the list columns
		 
	 * {implied options}
	 * o (string) = the order by column
	 * d (string) = The order by direction: asc or desc
	 * p (int) = the page to jump to
	*/

	/* scopes available for hamburger dropdown and exporting list */
	$scope.exportTypes = [{label:'PDF', value: 'PDF'}, {label:'Excel', value:'EXCEL'}, {label:'CSV', value:'CSV'}];
	
	/* record callback for table or row update */
	$scope.go = function(table, item) {
		var parms = {};
		parms.table = table;
		//parms.sys_id = item.sys_id;
		parms.record = item;
		$scope.ignoreLocationChange = true;
		for (var x in c.data.items) {
			c.data.items[x].selected = false;
		}
		if(item){
			item.selected = true;

			$scope.select(table, item);
		}
	};

	/* callback for the new button */
	//Code Review - Not beign used in this widget.
	$scope.newRecord = function(){
		var parms = {
			id: 'form',
			table: $scope.data.table,
			view: $scope.data.view,
			sys_id: '-1'
		};
		if ($scope.data.filter != '')
			parms.query = $scope.data.filter;

		$location.search(parms);
	};
	
	/* listen for reload events from other widgets */
	$scope.$on("docint.reload_documents", function(e, params){
		getData(true);
	});
	
	/* listen for document selection from other widgets */
	//Code Review - Check if paging has broken functionality.
	$scope.$on("docint.select_document", function(e, params){
		spUtil.update($scope).then(function(){
			if(params.value != undefined){
				var selectedItem = null;
				for(var index in $scope.data.items){
					var a_item = $scope.data.items[index];
					if(a_item[e.name] == e.value){
						selectedItem = a_item;
						$rootScope.$broadcast('docint.load_sp_preview', selectedItem);
						break;
					}
				}
			}
		});		
	});
	
	/* record selection callback for editing a record */
	$scope.select = function(tbl, item) {
		if(item) {
			$rootScope.$broadcast('docint.load_sp_preview', item);
			//Code Review - Cols list is not used any longer.
			var cols = "";
			for(var c in item){
				cols += c+",";
			}
		}
	};

	/* used by Footer Paging to get multiple page buttons */
	$scope.getNumber = function(num) {
		return new Array(num);
	};
  
	/* used by Footer Paging for data window range */
	$scope.mathMin = function(v1,v2) {
		return Math.min(v1,v2);
	};
  
	/* used to refresh data, and also ensure a record watcher attached correctly */
	function getData(updateUrl) {
		var f = $scope.data;
		spUtil.update($scope).then(function(data) {	
			//Evaluate wether client side $scope.data.items need to be refreshed here for REST mode.
			initRecordWatcher(f.table, f.filter);
		});
	}

	/* record watcher for table events */
	//Test if function is needed, remove if not needed.
	var watcher;
	function initRecordWatcher(table, filter){
		if (watcher)
			watcher.unsubscribe();

		if (table && filter) {
			var watcherChannel = amb.getChannelRW(table, filter);
			amb.connect();
			watcher = watcherChannel.subscribe(function(message) {
				if (!message.data)
					return;
				switch(message.data.action) {
					case "change":
						updateRowFromRW(message);
						break;
					case "exit":
						// A record was removed
					case "enter":
						// A record was added
					default:
						spUtil.update($scope);
						break;
				}
			});
		}
	}

	/* table watcher row updater */
	//Test if needed, remove if not needed.
	function updateRowFromRW(message) {
		if (message.data && message.data.sys_id && $scope.data.items) {
			var row, field;
			for(var i=0;i<$scope.data.items.length; i++) {
				row = $scope.data.items[i];
				if (row.sys_id == message.data.sys_id) {
					var fields = Object.getOwnPropertyNames(message.data.record);
					for(var f in fields) {
						field = fields[f];
						if(typeof row[field] !== 'undefined') {
						    row[field].display_value = message.data.record[field].display_value;
						}
					}
				}
			}
		}
	}

	/* destructor for record watcher */
	//Test if needed, remove if not needed.
	$scope.$on('$destroy', function() {
		if (watcher)
			watcher.unsubscribe();
	});

	/* sets page number and reloads table data */
	//When getData is corrected this to set page num and call getData(true);
	$scope.setPageNum = function(num) {
		$scope.data.p = num;
		if ($scope.data.sp_interface == 'graph'){
			getData(true);
		}
		else if ($scope.data.sp_interface == 'rest'){
			$scope.data.page_index = $scope.data.p -1;
			$scope.data.window_start = $scope.data.page_index * $scope.data.window_size;
			$scope.data.window_end = ($scope.data.page_index + 1) * $scope.data.window_size;
			$scope.data.window_end = Math.min($scope.data.window_end, $scope.data.allItems.length);
			$scope.data.items = $scope.data.allItems.slice($scope.data.window_start, $scope.data.window_end);
		}
	};

	/* change sort order */
	//getData needs to respect sort order for REST mode.
	$scope.setOrderBy = function(field) {
		var d = "asc";
		if ($scope.data.o == field) {
			if ($scope.data.d == "asc")
				d = "desc";
			else
				d = "asc";
		}

		if (d === "asc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc);
		} else if (d === "desc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc);
		}
		$scope.data.o = field;
		$scope.data.d = d;
		$scope.setSearch(true);
	};

	/* used by setOrderBy for going back to page 1 */
	$scope.setSearch = function(updateUrl) {
		$scope.data.p = 1;
		getData(updateUrl);
	};

	/* security trimming feedback info */
	//Eval if needed, remove if not needed.
	$scope.rowsWerePruned = function() {
		if (!$scope.data.items)
			return;

		$scope.rowsPruned = $scope.mathMin($scope.data.window_end,$scope.data.row_count) - $scope.data.window_start - $scope.data.items.length;
		return $scope.rowsPruned > 0;
	};

	// Makes Widget Async
	var title = $scope.data.title;
	if ($scope.options.use_instance_title == 'true')
		title = $scope.options.title;
		$scope.data = $scope.options;
		$scope.loadingData = true;
	//This should be evaluated for performance issues.
		$scope.server.update().then(function() {
		$scope.loadingData = false;
		$scope.data.title = title;
		
		if($scope.data.sp_interface == 'rest'){
			var _dtadlal = new DTTaskerADAL($scope.data.sp_client_id, $scope.data.sp_tenant_name, $scope.data.sp_base_2);
			var dtsp = new DTTaskerSharePoint($scope.data.sp_base_2, $scope.data.sp_tab_name);
			_dtadlal.getToken(function (token) {
				var items = dtsp.getSPDocumentsByItemId(token, $scope.data.sp_integration_field, $scope.data.fieldValue);
				var results = [];
				for(var item in items.d.results){
					items.d.results[item].FieldValuesAsText.url = items.d.results[item].ServerRedirectedEmbedUri;
					results.push(items.d.results[item].FieldValuesAsText);
			}
			if (results.length == 0){
					//$scope.data.message = "No documents added for this record.";
					return;
				}
				else if (results.length > 0){
					$rootScope.$broadcast("docint.update_count", {count: results.length});
					$scope.data.row_count = results.length;
					$scope.data.invalid_table = results.length > 0 ? false : true;
					$scope.data.page_index = $scope.data.p - 1;
					
					//Manipulate the $scope.data.items for paging.
					$scope.data.num_pages = Math.ceil($scope.data.row_count / $scope.data.window_size);
					$scope.data.window_start = $scope.data.page_index * $scope.data.window_size;
					$scope.data.window_end = ($scope.data.page_index + 1) * $scope.data.window_size;
					$scope.data.window_end = Math.min($scope.data.window_end, results.length);
					$scope.data.items = results.slice($scope.data.window_start, $scope.data.window_end);
					$scope.data.allItems = results;
				}
			}, _dtadlal.authContext);
		}
	});
}]]></client_script>
        <controller_as>c</controller_as>
        <css>/* standard table widget section*/&#13;
.panel-heading {&#13;
  padding-left: 8px;&#13;
}&#13;
&#13;
thead {&#13;
  border-bottom: 1px solid #ddd;&#13;
}&#13;
&#13;
table {&#13;
  margin-bottom: 0;&#13;
}&#13;
&#13;
.table &gt; thead &gt; tr &gt; th {&#13;
  border: 1px solid #ddd;&#13;
  cursor: pointer;&#13;
  vertical-align: middle;&#13;
&#13;
  &amp;:nth-child(2) {&#13;
    border-left: none;&#13;
  }&#13;
  &#13;
  &amp;:last-child {&#13;
    border-right: none;&#13;
  }&#13;
}&#13;
&#13;
th i {&#13;
  display: inline-block;&#13;
  margin-left: 5px;&#13;
  color: #A0A0A0;&#13;
}&#13;
&#13;
th .disabled{&#13;
  color:#ddd;&#13;
}&#13;
&#13;
.th-title {&#13;
  display: inline-block;&#13;
  color: $primary;&#13;
}&#13;
&#13;
.panel-body {&#13;
  overflow: auto;&#13;
  padding: 0px;&#13;
}&#13;
&#13;
tbody tr:last-child {&#13;
  border-bottom: none;&#13;
}&#13;
&#13;
.pruned-msg {&#13;
  padding-bottom: 10px;&#13;
  padding-left: 4px;&#13;
  text-align: center;&#13;
}&#13;
&#13;
.pruned-msg-filter-pad {&#13;
  padding-top:8px;&#13;
}&#13;
&#13;
/* table row selection color */&#13;
.selected {&#13;
  color: #fff;&#13;
  background-color: #909090;&#13;
  border-color: 1px solid #fff;&#13;
}&#13;
&#13;
/* hambuger menu dropdown*/&#13;
.dropdown-toggle {&#13;
  background: none;&#13;
  padding: 0 0 4px 0;&#13;
}&#13;
&#13;
/* min height for hide_header option */&#13;
.min-height-20 {&#13;
  min-height: 20px;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>docint-filtered-sharepoint-items</id>
        <internal>false</internal>
        <link/>
        <name>Document Integration Filtered SharePoint</name>
        <option_schema>[{"name":"table","label":"table","type":"string"},{"name":"fields","label":"fields","type":"string"},{"name":"edit_fields","label":"edit fields","type":"string"},{"name":"hide_header","default_value":"true","label":"Hide header","type":"boolean"},{"name":"hide_footer","default_value":"false","label":"Hide footer","type":"boolean"},{"name":"window_size","default_value":"5","label":"items to show","type":"integer"}]</option_schema>
        <public>false</public>
        <roles>x_dtll2_contentint.contentintegration_task_user</roles>
        <script><![CDATA[(function() {
	//bring in the options for all the mentioned properties and set proper defaults
	  var fieldstr = gs.getProperty('x_dtll2_contentint.sp_list_widget_fields');
    var defaults = { p: 1, o : 'name', d : 'asc', title:gs.getProperty('x_dtll2_contentint.sp_tab_name'), window_size: 5, fields:fieldstr.split(',')};
	
	var di_com = new DI_Common();
	data = di_com.optionCopy(['fieldName', 'fieldValue','title', 'fields', 'p', 'o', 'd', 'window_size', 'token'], input, options, data, defaults);
	
	data.msg = {};
	data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
	data.msg.sortingByDesc = gs.getMessage("Sorting by descending");
  
	/* {imported from options}
	 * data.title = the title of this group of items
	 * data.fieldName = the field name to pass into sharepoint for filter on
	 * data.fieldValue = the value to pass into sharepoint to filter on 
	 * data.fields = a comma delimited list of field names to show in the data table	 
	 
	 * {implied options}
	 * data.p = the current page starting at 1
	 * data.o = the order by column
	 * data.d = the order by direction	
	 
	 * {server generated data}
	 * data.items = the table data as an array
   * data.view = the view that is used on the data window
	 * data.invalid_table (bool) = indicates a problem with the table
	 * data.page_index = the zero-indexed page number 
	 * data.window_size = size of data window
	 * data.window_start, data.window_end = range for the data window
	 * data.row_count = count of total data rows
	 * data.num_pages = count of total data pages
	 * data.column_labels = labels for table columns
	 * data.fields_array = array of fields
	 */
	//System Properties
	data.sp_interface = gs.getProperty('x_dtll2_contentint.sp_interface');
	data.sp_integration_field = gs.getProperty('x_dtll2_contentint.sp_integration_field');
	data.sp_client_id = gs.getProperty('x_dtll2_contentint.sp_client_id');
	data.sp_tenant_name = gs.getProperty('x_dtll2_contentint.sp_tenant_name');
	data.sp_base_2 = gs.getProperty('x_dtll2_contentint.sp_base_2');
	data.sp_tab_name = gs.getProperty('x_dtll2_contentint.sp_tab_name');
	data.fields_array = gs.getProperty('x_dtll2_contentint.sp_col_array').split(",");
	data.column_labels = JSON.parse(gs.getProperty('x_dtll2_contentint.sp_col_label_json'));
	
	var DI_DG = new GetDocuments();
	var results = [];
	if(data.sp_interface == 'graph'){
		results = DI_DG.getDocumentsFiltered(data.fieldName, data.fieldValue);    
	} else if(data.sp_interface == 'rest'){
		//Results are handled client side.
		return;
	}
  data.invalid_table = results.length > 0 ? false : true;
	data.row_count = results.length;
  data.page_index = data.p - 1;
	
	data.window_size =  defaults.window_size;
	
	if(data.o){
		//ordering
		if(data.d == "asc"){
			results.sort(function(a,b){return a[data.o] > b[data.o] ? 1: (a[data.o] < b[data.o] ? -1: 0)});
		} else {
			results.sort(function(a,b){return a[data.o] < b[data.o] ? 1: (a[data.o] > b[data.o] ? -1: 0)});
		}
	}
	
	data.num_pages = Math.ceil(data.row_count / data.window_size);
	data.fields = gs.getProperty('x_dtll2_contentint.sp_list_widget_disp_fields');
	for(var index in data.fields_array){
		var n = data.fields_array[index];
		if(!data.column_labels[n]){
			data.column_labels[n] = n;
		}
	}

	data.window_start = data.page_index * data.window_size;
	data.window_end = (data.page_index + 1) * data.window_size;
	data.window_end = Math.min(data.window_end, results.length);
	
	data.items = results.slice(data.window_start, data.window_end);	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>bkeener</sys_created_by>
        <sys_created_on>2018-07-17 20:03:33</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>6dedb22adb9fdb0069d100b5ca96195f</sys_id>
        <sys_mod_count>253</sys_mod_count>
        <sys_name>Document Integration Filtered SharePoint</sys_name>
        <sys_package display_value="DocIntegrator" source="x_dtll2_contentint">5f1c2992db8e130069d100b5ca96195f</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="DocIntegrator">5f1c2992db8e130069d100b5ca96195f</sys_scope>
        <sys_update_name>sp_widget_6dedb22adb9fdb0069d100b5ca96195f</sys_update_name>
        <sys_updated_by>bkeener</sys_updated_by>
        <sys_updated_on>2018-09-26 22:00:17</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default b">
    <!-- header -->
    <div class="panel-heading form-inline">
      <span class="dropdown m-r-xss">
        <button aria-label="${Table menu}" class="btn dropdown-toggle glyphicon glyphicon-menu-hamburger" style="line-height: 1.4em" id="optionsMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
        <ul class="dropdown-menu" aria-labelledby="optionsMenu">
          <li ng-repeat="t in ::exportTypes">
            <a ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_query={{data.filter}}&sysparm_view={{data.view}}&sysparm_fields={{data.fields}}" target="_new">${Export as} {{::t.label}}</a>
          </li>
        </ul>
      </span>
      <span class="panel-title">{{data.title || data.table_plural}}</span>
      <button name="new" role="link" class="btn btn-primary btn-sm m-l-xs" ng-click="newRecord()" ng-if="options.show_new == 'true' && data.canCreate && !data.newButtonUnsupported" aria-label="${Create new record}">${New}</button>
      <div class="clearfix"></div>
    </div>
    <div class="panel-heading form-inline" ng-hide="options.hide_header == 'false'">
      <span class="min-height-20 panel-title"> </span>
    </div>
    <!-- body -->
    <div class="panel-body">
      <h2 class="sr-only data-table-title">{{data.title || data.table_plural}} ${table} - ${page} {{data.p}}</h2>      
      <div class="alert alert-info" ng-if="!data.items.length && !data.num_pages && !data.invalid_table && !loadingData">
        ${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>} <span ng-bind="data.fieldName"></span><span ng-bind="data.fieldValue"></span>
      </div>
      <div class="alert alert-info" ng-if="loadingData">
          <fa name="spinner" spin="true"></fa> ${Loading data}...
      </div>
      <div class="alert alert-info" ng-if="data.message != null">
        <span ng-bind="data.message"></span>
      </div>
      <table class="table table-striped table-responsive" ng-if="data.items.length">
        <thead>
          <tr>
            <th class="sr-only"></th>
            <th ng-repeat="field in data.fields_array track by $index" ng-click="setOrderBy(field)" tabindex="0">
              <div class="th-title" aria-label="${Sort by } {{data.column_labels[field]}}">{{data.column_labels[field]}}</div>
              <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } {{data.column_labels[field]}} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i>
            </th>
          </tr>
        </thead>
        <tbody>
		  <tr ng-repeat="item in data.items track by item.ID">
            <td class="sr-only" tabindex="0" role="link" ng-click="go(data.table, item)" aria-label="${Open record}"></td>
            <td role="text" aria-label="{{item[field]}}" class="pointer" ng-class="{selected: item.selected}" ng-click="go(data.table, item)" ng-repeat="field in data.fields_array" data-field="{{field}}" data-th="{{data.column_labels[field]}}">
              <span>{{item[field]}}</span>
            </td>
          </tr>
        </tbody>
      </table>
      <div ng-class="{'pruned-msg-filter-pad': !data.items.length}" class="pruned-msg" ng-if="rowsWerePruned()">
        <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
        <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
      </div>
    </div>
    <!-- footer -->
    <div class="panel-footer" ng-hide="options.hide_footer == 'true'" ng-if="data.row_count">
      <div class="btn-toolbar m-r pull-left">
        <div class="btn-group">
          <a ng-disabled="data.p == 1" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" class="btn btn-default"  aria-label="${Previous page}"><i class="fa fa-chevron-left"></i></a>
        </div>
        <div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group">
          <a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn-default" aria-label="${Page} {{$index + 1}}">{{$index + 1}}</a>
        </div>
        <div class="btn-group">
          <a ng-disabled="data.p == data.num_pages" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" class="btn btn-default" aria-label="${Next page}"><i class="fa fa-chevron-right"></i></a>
        </div>
      </div>
      <div class="m-t-xs panel-title">${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count}}}</div>

      <span class="clearfix"></span>
    </div>
</div>]]></template>
    </sp_widget>
</record_update>
